## @vtlvariable name="measureUnit" type="java.lang.String"
## @vtlvariable name="nonemptyHeatmap" type="java.lang.Boolean"

## include common code
const heatmapX = ['Trans', 'Pers'];
const heatmapData  = {
    colorscale: [
        [0, 'white'],
        #if( $nonemptyHeatmap )
        [1, 'red']
        #else
        [1, 'white']
        #end
    ]
};
#parse( "template-common.js.vm" )

/*
 * CONSTANTS
 */

const memoryTypes = ['transient deselect', 'transient reset', 'persistent']

const scatterCommon = {
    connectgaps: true,
    type: 'scatter'
};

const xaxisCommon = {
    // dtick: 1,
    tickformat: ',d',
    title: 'Trap ID'
};

const yaxisCommon = {
    title: 'Free memory in B',
    tickformat: ',d'
};

const layoutCommon = {
    bargap: 0.2,
    grid: {
        rows: 2,
        columns: 1,
        pattern: 'independent'
    },
    height: 700,
    margin: {
        l: 80,
        r: 40,
        b: 80,
        t: 40,
        pad: 5
    },
    xaxis1: xaxisCommon,
    xaxis2: xaxisCommon,
    yaxis1: yaxisCommon,
    yaxis2: yaxisCommon
};

/*
 * FUNCTIONS
 */

// set default heading
document.getElementById('graphName').innerText = 'Select a line to highlight corresponding values.';

// Line graphs
const persistentEqual = Object.keys(measurements).every(e => measurements[e][0] === measurements[e][1]);

const traces = [];
for (var i = 0; i < 3; i++) {
    let vals = Object.values(measurements).map(e => e[i]);

    traces.push({
        ...scatterCommon,
        x: [...Array(vals.length + 1).keys()].splice(1),
        y: vals,
        xaxis: i < 2 ? 'x1' : 'x2',
        yaxis: i < 2 ? 'y1' : 'y2',
        name: memoryTypes[i],
        hovertemplate: 'Trap ID: %{x}<br>Free ' + memoryTypes[i] + ' memory: %{y} B<extra></extra>',
        mode: i === 2 || !persistentEqual ? 'lines+markers' : i === 0 ? 'markers' : 'lines'
    });
}

// WARNING: Layout and config must be passed directly!  Otherwise, sometimes the graph may fail to load.
Plotly.newPlot('plotly', traces, {
    ...layoutCommon
}, {
    responsive: true
});

// set click event handler
const plotlyDiv = document.getElementById('plotly');

// add the click handler
plotlyDiv.on('plotly_click', function (data) {
    const graph = data.points[0];
    const trapName = trapPrefix + graph.x;

    highlightTrap(trapName);
    document.querySelectorAll('.' + trapName).forEach(
        e => e.scrollIntoView({block: 'center', behavior: 'smooth'}));
});

// redraw graph event handler
function highlightTrap(trapName) {
    // remove old traces
    if (document.querySelector('.trap .trap_select') != null)
        Plotly.deleteTraces('plotly', [3, 4, 5]);

    selectTraps(trapName);

    // update trap title
    document.getElementById('graphName').textContent = trapName;

    const trapID = trapName.split('_').at(-1);
    const trace = {
        hoverinfo: 'skip',
        marker: {
            color: 'black',
            size: 6
        },
        mode: 'markers',
        showlegend: false,
        type: 'scatter',
        x: [trapID]
    };

    // highlight the points
    for (let i = 0; i < 3; i++) {
        let val = measurements[trapName][i];
        if (val === null) {
            for (const elem of Object.keys(measurements)) {
                if (elem === trapName)
                    break;

                if (measurements[elem][i] !== null)
                    val = measurements[elem][i];
            }
        }

        Plotly.addTraces('plotly', {
            ...trace,
            y: [val],
            xaxis: i < 2 ? 'x1' : 'x2',
            yaxis: i < 2 ? 'y1' : 'y2'
        });
    }
}

window.addEventListener('load', _ => {
    document.getElementById('trapSwitch').addEventListener('change', toggleTraps);
    document.querySelectorAll('.trap').forEach(elem => elem.addEventListener('click',
            // attribute with trap name is always the first
            evt => highlightTrap(evt.currentTarget.classList[0])))
});
