## @vtlvariable name="heatmapValues" type="java.util.List<java.util.List<java.lang.Double>>"
## @vtlvariable name="inputs" type="java.util.List<java.lang.String>"
## @vtlvariable name="measurements" type="java.util.Map<java.lang.String, java.util.List<java.lang.Long>>"
## @vtlvariable name="measureUnit" type="java.lang.String"

/*
 * MACROS
 */

#macro( object $map )
{
#foreach( $pair in $map.entrySet() )
    $pair.getKey(): $pair.getValue()#if( $foreach.hasNext ),#end
#end
}#end

/*
 * CONSTANTS
 */

const trapPrefix = '$measurements.keySet().iterator().next().replace('1', '')';

const inputs = $inputs;
const measurements = #object( $measurements );

const heatmapValues = {
    x: heatmapX,
    y: [...Array(${heatmapValues.size()} + 1).keys()].splice(1).reverse(),
    z: ${heatmapValues}
};

const heatmapValuesFiltered = {
    x: heatmapValues.x,
    y: undefined,
    z: heatmapValues.z.filter((e, i, z) => i === 0 || z[i][0] !== null || z[i - 1][0] === null)
};
heatmapValuesFiltered.y = heatmapValues.y.slice($heatmapValues.size() - heatmapValuesFiltered.z.length, $heatmapValues.size());

const histogramCommon = {
    type: 'histogram',
    xaxis: 'x2',
    yaxis: 'y1',
    showlegend: true,
    hovertemplate: 'Bin: %{x}<br>Count: %{y}<extra></extra>'
};

/*
 * FUNCTIONS
 */

const maxLineStringSize = 2 * heatmapValues.y[0].toString().length;

// Heatmap
Plotly.newPlot('heatmap', [{
    ...heatmapValuesFiltered,
    hovertemplate: 'Line: %{y}<br>%{z} $measureUnit<extra></extra>',
    showlegend: false,
    showscale: false,
    type: 'heatmap',
    xgap: 4,
    ...heatmapData
}], {
    paper_bgcolor: 'rgba(0, 0, 0, 0)',
    margin: {
        l: 18 + maxLineStringSize,
        r: 110,
        b: 12,
        t: 18,
        pad: 4
    },
    width: 112 + 40 * heatmapValues.x.length + maxLineStringSize,
    xaxis: {
        side: 'top',
        fixedrange: true,
        ticks: '',
        showgrid: false,
        zeroline: false
    },
    yaxis: {
        fixedrange: true,
        ticks: '',
        title: '',
        type: 'category',
        showgrid: false,
        zeroline: false
    }
}, {
    displayModeBar: false
});

// this is not very nice but Google didn't help much nor I'm a JS developer ¯\_(ツ)_/¯
const padding = 6;
const originalHeight = document.getElementById('codeWithoutTraps') - padding;

// Heatmap resize event
window.addEventListener('resize', _ => {
    const trapSwitch = document.getElementById('trapSwitch');
    const divWith = document.getElementById('codeWithTraps');

    if (trapSwitch.checked)
        Plotly.relayout('heatmap', {
            height: divWith.clientHeight - padding
        });
    else
        Plotly.relayout('heatmap', {
            height: originalHeight
        });
});

// Heatmap click event handler
const heatmapDiv = document.getElementById('heatmap');
heatmapDiv.on('plotly_click', function (data) {
    const graph = data.points[0];
    // check for a valid value
    if (graph.z === null)
        return;

    // compute the correct trap index
    const z = graph.data.z;

    let trapIdx = 0;
    for (let i = z.length - 1; i >= z.length - graph.y; i--) {
        if (z[i][0] !== null)
            trapIdx++;
    }

    // select the given trap
    const trapDiv = document.querySelector('.' + trapPrefix + trapIdx);
    const event = new MouseEvent('click');
    trapDiv.dispatchEvent(event);
});

/**
 * Shows or hides explicit performance traps.
 *
 * @param {Event} event change event
 */
function toggleTraps(event) {
    const divWith = document.getElementById('codeWithTraps');
    const divWithout = document.getElementById('codeWithoutTraps');

    if (event.currentTarget.checked) {
        divWith.style.display = 'initial';
        divWithout.style.display = 'none';

        Plotly.update('heatmap', {
            x: [heatmapValues.x],
            y: [heatmapValues.y],
            z: [heatmapValues.z]
        }, {
            'yaxis.type': 'category',
            height: divWith.clientHeight - padding
        });
        return;
    }

    divWith.style.display = 'none';
    divWithout.style.display = 'initial';

    Plotly.update('heatmap', {
        x: [heatmapValuesFiltered.x],
        y: [heatmapValuesFiltered.y],
        z: [heatmapValuesFiltered.z]
    }, {
        'yaxis.type': 'category',
        height: originalHeight
    });
}

/**
 * Highlights and selects the given trap.
 *
 * @param {String} trapName
 */
function selectTraps(trapName) {
    // update highlight of the selected trap
    document.querySelectorAll('.trap .trap_select').forEach(t => t.classList.remove('trap_select'));
    document.querySelectorAll('.' + trapName + ' .trap_contents').forEach(t => t.classList.add('trap_select'));
}
