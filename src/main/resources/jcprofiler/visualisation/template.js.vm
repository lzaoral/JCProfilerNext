## @vtlvariable name="filteredMeasurements" type="java.util.Map<java.lang.String, java.util.List<java.lang.Long>>"
## @vtlvariable name="inputs" type="java.util.List<java.lang.String>"
## @vtlvariable name="measurements" type="java.util.Map<java.lang.String, java.util.List<java.lang.Long>>"
## @vtlvariable name="timeUnit" type="java.lang.String"

const inputs = $inputs;
let selectedTraps = null;

function toggleTraps(event) {
    let divWith = document.getElementById('codeWithTraps')
    let divWithout = document.getElementById('codeWithoutTraps')
    if (event.currentTarget.checked) {
        divWith.style.display = 'initial';
        divWithout.style.display = 'none';
    } else {
        divWith.style.display = 'none';
        divWithout.style.display = 'initial';
    }
}

function redrawGraph(trapName, vals, filteredVals) {
    if (selectedTraps === null)
        document.getElementById('graphHelp').style.display = 'initial';

    selectedTraps?.forEach(t => t.classList.remove('trap_select'));
    selectedTraps = document.querySelectorAll('.' + trapName + ' .trap_contents');
    selectedTraps.forEach(t => t.classList.add('trap_select'));

    let graphName = document.getElementById('graphName');
    graphName.textContent = trapName;

    let traces = [];

    const hasUnreach = vals.includes(null);
    if (hasUnreach) {
        const y = vals.filter(e => e === null).length;
        traces.push({
            x: [''],
            y: [y],
            type: 'bar',
            xaxis: 'x1',
            yaxis: 'y1',
            name: 'unreachable',
            showlegend: false,
            marker: {
                color: 'rgb(255, 0, 0)',
                opacity: 0.65
            },
            hovertemplate: "Unreachable<br>Count: %{y} (%{y}/" + vals.length + ")<extra></extra>"
        });
    }

    const hasTime = vals.some(e => e !== null);
    if (hasTime) {
        // Histograms
        const histogramCommon = {
            type: 'histogram',
            xaxis: 'x2',
            yaxis: 'y1',
            showlegend: true,
            hovertemplate: "Bin: %{x}<br>Count: %{y}<extra></extra>"
        };

        traces.push({
            ...histogramCommon,
            x: vals.filter(e => e !== null),
            name: 'with outliers',
            visible: 'legendonly',
            marker: {
                color: 'rgb(255,136,0)',
                opacity: 0.75
            }
        }, {
            ...histogramCommon,
            x: filteredVals,
            name: 'without outliers',
            marker: {
                color: 'rgb(49, 130, 189)',
                opacity: 0.75
            }
        });

        // Line graph

        // make dots only on line endings
        let dot_x = [], dot_y = [];
        for (let i = 0; i < vals.length; i++) {
            // no value
            if (vals[i] === null)
                continue;

            // both neighbouring values are defined or only one is defined on border values
            if (vals.length > 1 &&
                (i === 0 || vals[i - 1] !== null) && (i === vals.length - 1 || vals[i + 1] != null))
                continue;

            dot_x.push(i + 1);
            dot_y.push(vals[i]);
        }

        const scatterCommon = {
            type: 'scatter',
            xaxis: 'x3',
            yaxis: 'y2',
            name: 'timediff',
            showlegend: false,
            marker: {
                color: 'rgb(86, 189, 49)',
                opacity: 0.75
            },
            hovertemplate: "Round: %{x}<br>Time: %{y} $timeUnit<extra></extra>"
        };

        traces.push({
            ...scatterCommon,
            x: dot_x,
            y: dot_y,
            mode: 'markers'
        }, {
            ...scatterCommon,
            x: [...Array(vals.length + 1).keys()].splice(1),
            y: vals,
            mode: 'lines'
        });
    }

    // WARNING: Layout and config must be passed directly!  Otherwise, sometimes the graph may fail to load.
    Plotly.react('plotly', traces, {
        bargap: 0.2,
        height: 700,
        margin: {
            l: 60,
            r: 40,
            b: 40,
            t: 40,
            pad: 5
        },
        xaxis1: {
            anchor: 'y1',
            domain: [0, hasTime ? 0.45 : 1],
            title: 'Unreachable'
        },
        xaxis2: {
            anchor: 'y1',
            domain: [hasUnreach ? 0.55 : 0, 1],
            // dtick: 1,
            tickformat: ',d',
            title: 'Time in $timeUnit'
        },
        xaxis3: {
            anchor: 'y2',
            domain: [0, 1],
            tickformat: ',d',
            title: 'Round'
        },
        yaxis1: {
            anchor: 'x1',
            domain: [0.55, 1],
            title: 'Frequency'
            // type: 'log',
        },
        yaxis2: {
            anchor: 'x3',
            domain: [0, 0.43],
            title: 'Time in $timeUnit'
        }
    }, {
        responsive: true
    });

    // set click event handler
    let plotlyDiv = document.getElementById('plotly');

    // replace the event handler
    plotlyDiv.removeAllListeners('plotly_click');
    plotlyDiv.on('plotly_click', function (data) {
        const graph = data.points[0];
        let msg, selectedInputs;

        switch (graph.data.type) {
            // line graph
            case 'scatter':
                selectedInputs = inputs.slice(graph.x - 1, graph.x);
                msg = 'Round: ' + graph.x + '\n';
                break;
            case 'histogram':
                selectedInputs = graph.pointIndices.map(e => inputs[e]);

                // Rather hack-ish and not very efficient but the input object does not contain the %{x}
                // value from hoverstrings.
                const binValues = graph.pointIndices.map(e => vals[e]);
                msg = 'Bin: ' + Math.min(...binValues) + ' to ' + Math.max(...binValues) + '\n';
                break;
            case 'bar':
                selectedInputs = vals.reduce((res, e, i) => {
                    if (e === null)
                        res.push(inputs[i]);
                    return res;
                }, []);
                console.assert(selectedInputs.length === graph.y);

                msg = 'Unreachable\n';
                break;
            default:
                return;
        }

        msg += 'Inputs:\n';

        const sortedInputs = Array.from(new Set(selectedInputs)).sort();
        sortedInputs.forEach(e => msg += e + '\n');

        alert(msg);
    });
}

window.addEventListener('load', _ => {
    document.getElementById('trapSwitch').addEventListener('change', toggleTraps);
    let fun;
    #foreach( $trap in $measurements.keySet() )
    fun = _ => {
        const vals = $measurements[$trap];
        const filteredVals = $filteredMeasurements[$trap];
        redrawGraph('$trap', vals, filteredVals);
    };
    document.querySelectorAll('.$trap').forEach(elem => elem.addEventListener('click', fun));
    #end
});
