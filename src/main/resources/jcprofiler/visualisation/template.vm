#* @vtlvariable name="cardATR" type="java.lang.String" *#
#* @vtlvariable name="code" type="java.lang.String[]" *#
#* @vtlvariable name="inputs" type="java.util.List<java.lang.String>" *#
#* @vtlvariable name="measurements" type="java.util.Map<java.lang.String, java.util.List<java.lang.Long>>" *#
#* @vtlvariable name="methodName" type="java.lang.String" *#
#* @vtlvariable name="null" type="java.lang.Object" *#
#* @vtlvariable name="timeUnit" type="java.lang.String" *#

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Measurements - $methodName</title>
    ## highlight.js 11+ ignores and strips HTML tags inside <code> element
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.3/styles/github.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.3/highlight.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-2.13.3.min.js"></script>
    <script>
        hljs.highlightAll()

        const inputs = $inputs;
        let selectedTrap = null;

        function redrawGraph(trapName, vals) {
            selectedTrap?.classList.remove('trap_select');
            selectedTrap = event.target;
            selectedTrap.classList.add('trap_select');

            let graphName = document.getElementById('graphName');
            graphName.textContent = trapName;

            let traces = [];

            const hasUnreach = vals.includes(null);
            if (hasUnreach) {
                traces.push({
                    x: [''],
                    y: [vals.filter(e => e === null).length],
                    type: 'bar',
                    xaxis: 'x1',
                    yaxis: 'y1',
                    name: 'unreachable',
                    showlegend: false,
                    marker: {
                        color: 'rgb(255, 0, 0)',
                        opacity: 0.65
                    },
                    hovertemplate: "Unreachable<br>Count: %{y}<extra></extra>",
                });
            }

            const hasTime = vals.some(e => e !== null);
            if (hasTime) {
                traces.push({
                    x: vals.filter(e => e !== null),
                    type: 'histogram',
                    xaxis: 'x2',
                    yaxis: 'y1',
                    name: 'time',
                    showlegend: false,
                    marker: {
                        color: 'rgb(49, 130, 189)',
                        opacity: 0.75
                    },
                    hovertemplate: "Bin: %{x}<br>Count: %{y}<extra></extra>",
                });

                traces.push({
                    x: [...Array(vals.length + 1).keys()].splice(1),
                    y: vals,
                    type: 'scatter',
                    ... hasUnreach && {mode: 'lines+markers'},
                    xaxis: 'x3',
                    yaxis: 'y2',
                    name: 'timediff',
                    showlegend: false,
                    marker: {
                        color: 'rgb(86,189,49)',
                        opacity: 0.75
                    },
                    hovertemplate: "Round: %{x}<br>Time: %{y} $timeUnit<extra></extra>",
                });
            }

            // WARNING: Layout and config must be passed directly!  Otherwise, sometimes the graph may fail to load.
            Plotly.react('plotly', traces, {
                bargap: 0.2,
                height: 700,
                xaxis: {
                    anchor: 'y1',
                    domain: [0, hasTime ? 0.45 : 1],
                    title: 'Unreachable',
                },
                xaxis2: {
                    anchor: 'y1',
                    domain: [hasUnreach ? 0.55 : 0, 1],
                    // dtick: 1,
                    tickformat: ',d',
                    title: 'Time in $timeUnit',
                },
                xaxis3: {
                    anchor: 'y2',
                    domain: [0, 1],
                    tickformat: ',d',
                    title: 'Round',
                },
                yaxis: {
                    anchor: 'x1',
                    domain: [0.55, 1],
                    title: 'Frequency',
                    // type: 'log',
                },
                yaxis2: {
                    anchor: 'x3',
                    domain: [0, 0.43],
                    title: 'Time in $timeUnit',
                },
            }, {
                responsive: true
            });

            // set click event handler
            let plotlyDiv = document.getElementById('plotly');

            // replace the event handler
            plotlyDiv.removeAllListeners('plotly_click');
            plotlyDiv.on('plotly_click', function (data) {
                const graph = data.points[0];
                let msg, binInputs;

                switch (graph.fullData.type) {
                    // line graph
                    case 'scatter':
                        binInputs = inputs.slice(graph.x - 1, graph.x);
                        msg = 'Round: ' + graph.x + '\n';
                        break;
                    case 'histogram':
                        const binSizeHalf = graph.fullData.xbins.size / 2;
                        binInputs = graph.pointIndices.map(e => inputs[e]);

                        msg = 'Bin: ' + Math.ceil(graph.x - binSizeHalf) + ' to ' +
                                        Math.floor(graph.x + binSizeHalf) + '\n';
                        break;
                    case 'bar':
                        binInputs = vals.reduce((res, e, i) => {
                            if (e === null)
                                res.push(inputs[i]);
                            return res;
                        }, []);
                        console.assert(binInputs.length === graph.y);

                        msg = 'Unreachable\n';
                        break;
                    default:
                        return;
                }

                msg += 'Inputs:\n';

                const sortedBinInputs = Array.from(new Set(binInputs)).sort();
                sortedBinInputs.forEach(e => msg += e + '\n');

                alert(msg);
            });
        }
    </script>
    <style>
h3 {
    text-align: center;
}

.contents {
    display: flex;
    justify-content: space-between;
}

.trap:hover {
    cursor: pointer;
    font-style: italic;
}

.trap_select {
    font-style: italic;
}

.trap_err {
    background-color: rgba(255, 0, 0, 25%);
}

.trap_warn {
    background-color: rgba(255, 255, 0, 50%);
}

.graph {
    align-content: center;
    width: 46%;
}

.graph-sticky {
    top: 0;
    position: -webkit-sticky;
    position: sticky;
}

.code {
    float: left;
    width: 50%;
}

.center {
    text-align: center;
}
    </style>
</head>
<body>
    <h1>$methodName</h1>
    <div class="contents">
        <div class="code">
            <p><b>Card ATR:</b> <a href="https://smartcard-atr.apdu.fr/parse?ATR=$cardATR" target="_blank">$cardATR</a></p>
            <p><b>Source measurements:</b> <a href="measurements.csv" target="_blank">measurements.csv</a></p>
            <pre><code class="language-java">
#foreach( $line in $code )
    #if( $line.trim().startsWith("PM.check(PMC.") )
        #set( $trap = $line.trim().replace("PM.check(PMC.", "").replace(");", "") )
        #set( $vals = $measurements[$trap] )
        #set( $trap_warn = $vals.contains($null) )
        #set( $trap_err = $trap_warn && $vals.stream().distinct().count() > 1 )
<div class="trap #if( $trap_err ) trap_err #elseif( $trap_warn ) trap_warn #end"
     onclick="redrawGraph( '$trap', $vals )">$line
</div>#else
$line
#end#end        </code>
            </pre>
        </div>
        <div class="graph">
            <div class="graph-sticky">
                <h3 id="graphName">Select TRAP to view its histogram.</h3>
                <p class="center">Click on a bin to get a list of corresponding inputs.</p>
                <div id="plotly"></div>
            </div>
        </div>
    </div>
</body>
</html>
